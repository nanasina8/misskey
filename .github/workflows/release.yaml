name: Release

on:
  workflow_dispatch:
    inputs:
      base_version:
        type: string
        description: Enter base version. (e.g. 2024.8.0)
        required: true
        default: ""

concurrency:
  group: release
  cancel-in-progress: false

permissions:
  contents: read

jobs:
  check_context:
    name: Check context
    runs-on: ubuntu-22.04
    steps:
      - name: Check actor
        if: github.actor != github.repository_owner
        run: exit 1

      - name: Check branch
        if: github.ref_name != vars.DEVELOP_BRANCH
        run: exit 1

      - name: Check base version
        run: |
          base="${{ inputs.base_version }}"
          if [ -z "$base" ]; then
            exit 1
          fi

          year="$(echo "$base" | cut -d. -f1)"
          if [[ ! "$year" =~ ^[0-9]+$ ]]; then
            exit 1
          fi

          month="$(echo "$base" | cut -d. -f2)"
          if [[ "$month" -lt 1 && "$month" -gt 12 ]]; then
            exit 1
          fi

          patch="$(echo "$base" | cut -d. -f3)"
          if [[ ! "$patch" =~ ^[0-9]+$ ]]; then
            exit 1
          fi

  parse_version:
    name: Parse new version
    runs-on: ubuntu-22.04
    needs:
      - check_context
    outputs:
      NEW_VERSION: ${{ steps.generate.outputs.NEW_VERSION }}
    steps:
      - name: Checkout ${{ github.sha }}
        uses: actions/checkout@v4.1.7
        with:
          ref: ${{ github.sha }}
          fetch-depth: 1

      - name: Generate new version
        id: generate
        run: |
          current_version="$(cat package.json | jq -r '.version')"
          current_base="$(echo $current_version | sed 's/-.*//')"
          new_base="${{ inputs.base_version }}"
          new_base="${new_base:-$current_base}"
          new_suffix=""
          if [[ "$current_version" != "$current_base" && "$current_base" == "$new_base" ]]; then
            new_suffix="$(($(echo $current_version | cut -d- -f2 | cut -d. -f2) + 1))"
          fi
          new_suffix="${new_suffix:-"0"}"
          new_version="${new_base}-taiyme.${new_suffix}"
          echo "NEW_VERSION=${new_version}" >> $GITHUB_OUTPUT

  bump_version_update:
    name: Bump version (update)
    runs-on: ubuntu-22.04
    needs:
      - parse_version
    steps:
      - name: Checkout ${{ github.sha }}
        uses: actions/checkout@v4.1.7
        with:
          ref: ${{ github.sha }}
          fetch-depth: 1

      - name: Update package.json (root)
        run: |
          jq --tab '.version = "${{ needs.parse_version.outputs.NEW_VERSION }}"' package.json > tmp
          mv tmp package.json

      - name: Update package.json (misskey-js)
        working-directory: packages/misskey-js
        run: |
          jq --tab '.version = "${{ needs.parse_version.outputs.NEW_VERSION }}"' package.json > tmp
          mv tmp package.json

      - name: Update compose_example.yml
        run: |
          old_docker_image="$(yq '.services.web.image' compose_example.yml)"
          new_docker_image='${{ vars.DOCKER_IMAGE_NAME }}:${{ needs.parse_version.outputs.NEW_VERSION }}'
          sed -i "s|image: ${old_docker_image}|image: ${new_docker_image}|g" compose_example.yml

      - name: Upload artifacts
        uses: actions/upload-artifact@v4.4.0
        with:
          name: bump_version_files
          path: |
            package.json
            packages/misskey-js/package.json
            compose_example.yml

  bump_version_upload:
    name: Bump version (upload)
    runs-on: ubuntu-22.04
    needs:
      - parse_version
      - bump_version_update
    steps:
      - name: Create GitHub App Token
        uses: actions/create-github-app-token@v1.11.0
        id: app-token
        with:
          app-id: ${{ secrets.RELEASE_APP_ID }}
          private-key: ${{ secrets.RELEASE_PRIVATE_KEY }}

      - name: Get GitHub App User ID
        id: get-user-id
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
        run: |
          user_id="$(gh api "/users/${{ steps.app-token.outputs.app-slug }}[bot]" --jq .id)"
          echo "user-id=${user_id}" >> $GITHUB_OUTPUT

      - name: Checkout ${{ vars.DEVELOP_BRANCH }}
        uses: actions/checkout@v4.1.7
        with:
          token: ${{ steps.app-token.outputs.token }}
          persist-credentials: false
          ref: ${{ vars.DEVELOP_BRANCH }}
          fetch-depth: 1

      - name: Download artifacts
        uses: actions/download-artifact@v4.1.8
        with:
          name: bump_version_files

      - name: Commit and Push
        run: |
          git config --global user.name '${{ steps.app-token.outputs.app-slug }}[bot]'
          git config --global user.email '${{ steps.get-user-id.outputs.user-id }}+${{ steps.app-token.outputs.app-slug }}[bot]@users.noreply.github.com'
          git remote set-url origin https://x-access-token:${{ steps.app-token.outputs.token }}@github.com/${{ github.repository }}
          git add .
          git commit -m "Release: ${{ needs.parse_version.outputs.NEW_VERSION }}"
          git tag ${{ needs.parse_version.outputs.NEW_VERSION }}
          git push origin HEAD
          git push origin ${{ needs.parse_version.outputs.NEW_VERSION }}

  create_pr:
    name: Create PR
    runs-on: ubuntu-22.04
    needs:
      - parse_version
      - bump_version_upload
    outputs:
      PR_NUMBER: ${{ steps.create_pr.outputs.CREATED_PR }}
    steps:
      - name: Create GitHub App Token
        uses: actions/create-github-app-token@v1.11.0
        id: app-token
        with:
          app-id: ${{ secrets.RELEASE_APP_ID }}
          private-key: ${{ secrets.RELEASE_PRIVATE_KEY }}

      - name: Checkout ${{ vars.DEVELOP_BRANCH }}
        uses: actions/checkout@v4.1.7
        with:
          token: ${{ steps.app-token.outputs.token }}
          persist-credentials: false
          ref: ${{ vars.DEVELOP_BRANCH }}
          fetch-depth: 0

      - name: Create PR
        id: create_pr
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
        run: |
          created_pr="$(gh pr create --draft --base ${{ vars.RELEASE_BRANCH }} --head ${{ vars.DEVELOP_BRANCH }} --title "Release: ${{ needs.parse_version.outputs.NEW_VERSION }}" --body "")"
          created_pr="$(echo $created_pr | awk -F '/' '/\/pull\/[0-9]+$/ {print $NF}')"
          echo "CREATED_PR=${created_pr}" >> $GITHUB_OUTPUT

  merge_pr:
    name: Merge PR
    runs-on: ubuntu-22.04
    needs:
      - create_pr
    steps:
      - name: Create GitHub App Token
        uses: actions/create-github-app-token@v1.11.0
        id: app-token
        with:
          app-id: ${{ secrets.RELEASE_APP_ID }}
          private-key: ${{ secrets.RELEASE_PRIVATE_KEY }}

      - name: Checkout ${{ vars.DEVELOP_BRANCH }}
        uses: actions/checkout@v4.1.7
        with:
          token: ${{ steps.app-token.outputs.token }}
          persist-credentials: false
          ref: ${{ vars.DEVELOP_BRANCH }}
          fetch-depth: 1

      - name: Merge PR
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
        run: |
          gh pr checks ${{ needs.create_pr.outputs.PR_NUMBER }} --watch
          gh pr ready ${{ needs.create_pr.outputs.PR_NUMBER }}
          gh pr merge ${{ needs.create_pr.outputs.PR_NUMBER }} --merge --auto

  release:
    name: Release
    runs-on: ubuntu-22.04
    needs:
      - parse_version
      - merge_pr
    steps:
      - name: Create GitHub App Token
        uses: actions/create-github-app-token@v1.11.0
        id: app-token
        with:
          app-id: ${{ secrets.RELEASE_APP_ID }}
          private-key: ${{ secrets.RELEASE_PRIVATE_KEY }}

      - name: Checkout ${{ vars.RELEASE_BRANCH }}
        uses: actions/checkout@v4.1.7
        with:
          token: ${{ steps.app-token.outputs.token }}
          persist-credentials: false
          ref: ${{ vars.RELEASE_BRANCH }}
          fetch-depth: 0

      - name: Create Release
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
        run: |
          gh release create ${{ needs.parse_version.outputs.NEW_VERSION }} --generate-notes
